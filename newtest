<?php

namespace common\widgets;

use yii\helpers\Html;
use yii\widgets\InputWidget;

class TimePicker extends InputWidget
{
    /**
     * @var array the options for the TimePicker JS plugin.
     */
    public $pluginOptions = [];

    /**
     * Display timeformat in input textbox.
     */
    public $timeFormat = 'HH:mm:ss';

    /**
     * @var string the input value.
     * This value will be converted using `asTime()`
     * with the [[dateFormat]] if it is not null.
     */
    public $value;

    /**
     * Initializes the widget.
     */
    public function init()
    {
        parent::init();
    }

    /**
     * @inheritdoc
     */
    public function run()
    {
        // get formatted time value
        if ($this->hasModel()) {
            $value = Html::getAttributeValue($this->model, $this->attribute);
        } else {
            $value = $this->value;
        }

        if ($value !== null && $value !== '') {
            // format value according to timeFormat
            try {
                $value = asTime($value, $this->timeFormat);
            } catch (InvalidParamException $e) {
                // ignore exception and keep original value if it is not a valid time
            }
        }

        $defaultOptions = [
            'time24Hours' => false,
            'showSeconds' => false,
            'minuteSteps' => 1,
            'class' => 'form-control',
        ];
        $options = array_merge($defaultOptions, $this->pluginOptions);
        $class = $options['class'];
        $attribute = $this->attribute;

        if ($this->hasModel()) {

            $html = '<div class="form-inline">';

            // Hours Select
            $start = $options['time24Hours'] ? 0 : 1;
            $end = $options['time24Hours'] ? 23 : 12;
            $html .= '<select class="' . $class . ' ' . $attribute . '-hour ' . $attribute . '">';
            for ($hours = $start; $hours <= $end; $hours++) {
                $hours = ($hours < 10 ? '0' . $hours : $hours);
                $html .= '<option value="' . $hours . '">' . $hours . '</option>';
            }
            $html .= '</select>';

            // Minute Select
            $html .= ' : <select class="' . $class . ' ' . $attribute . '-minute ' . $attribute . '">';
            for ($minute = 0; $minute < 60; $minute += $options['minuteSteps']) {
                $minute = ($minute < 10 ? '0' . $minute : $minute);
                $html .= '<option value="' . $minute . '">' . $minute . '</option>';
            }
            $html .= '</select>';

            // Second Select
            if ($options['showSeconds']) {
                $html .= ' : <select class="' . $class . ' ' . $attribute . '-second ' . $attribute . '">';
                for ($seconds = 0; $seconds < 60; $seconds++) {
                    $seconds = ($seconds < 10 ? '0' . $seconds : $seconds);
                    $html .= '<option value="' . $seconds . '">' . $seconds . '</option>';
                }
                $html .= '</select> ';
            }

            // AM/PM Select if time 12 Hours
            if (!$options['time24Hours']) {
                $html .= ' : <select class="' . $class . ' ' . $attribute . '-ampm ' . $attribute . '">';
                $html .= '
                    <option value="AM">AM</option>
                    <option value="PM">PM</option>';
                $html .= '</select>';
            }
            $html .= '</div>';

            echo $html;
            echo Html::activeHiddenInput($this->model, $attribute, $this->options);
        }
        $this->registerPlugin($options, $value, $attribute);
    }

    /**
     * Registers js and the related events
     */
    protected function registerPlugin($options, $value, $attribute)
    {
        $view = $this->getView();
        $hiddenId = Html::getInputId($this->model, $attribute);
        $showSecond = $options['showSeconds'] ? 'yes' : 'no';
        $time24Hours = $options['time24Hours'] ? 'yes' : 'no';
        $isNewRecord = $this->model->isNewRecord ? 'yes' : 'no';
        $formId = $this->field->form->options['id'];

        $view->registerJs("
            $(document).ready(function() {
                if ('$isNewRecord' == 'no') {
                    var attributeValue = '$value'.split(':');
                    $('.$attribute').each(function(index, e) {
                        $(e).val(attributeValue[index]);
                    });
                    if ('$time24Hours' == 'no') {
                        if (attributeValue[0] >= 12) {
                            $('.$attribute'+'-ampm').val('PM');
                        } else {
                            $('.$attribute'+'-ampm').val('AM');
                        }
                    }
                }
                function getAllValue() {
                    var data = [];
                    $('.$attribute').each(function(index, e) {
                        data[index] = $(e).val();
                    });
                    if ('$showSecond' == 'no') {
                        data.push('00');
                    }
                    if ('$time24Hours' == 'no') {
                        var amPm = data.pop();
                        if (amPm == 'PM' && data[0] != 12) {
                            data[0] = parseInt(data[0])+12;
                        } else if (amPm == 'AM' && data[0] == 12) {
                            data[0] = '00';
                        }
                    }
                    $('#$hiddenId').val(data.join(':'));
                }
                getAllValue();
                $('.$attribute').change(function() {
                    getAllValue();
                });
            });

        ");
        /*
        $('#$formId').submit(function(event) {
            var hiddenValue = $('#$hiddenId').val();
            var date = new Date(hiddenValue, '$this->timeFormat');
            console.log('$this->timeFormat');

            // alert('$value');
            event.preventDefault();
        });
        */
        //$aaaa = Html::getAttributeValue($this->model, $this->attribute);
        //dump($aaaa);
    }
}



------------------------------------


<?php

use yii\helpers\Html;
use yii\widgets\ActiveForm;
use common\widgets\timepicker\TimePicker;

/* @var $this yii\web\View */
/* @var $model backend\modules\timetable\models\ClassTimingDetail */
/* @var $form yii\widgets\ActiveForm */
?>

<?php $form = ActiveForm::begin(['id' => 'classtimingdetail-form']); ?>

<div class="row">
	<div class="col-sm-6">
		<?= $form->field($model, 'name')->textInput(['maxlength' => true]) ?>
	</div>
	<div class="col-sm-6">
		<?= $form->field($model, 'class_timing_id')->textInput() ?>
	</div>
	<div class="col-sm-6">
        <?= $form->field($model, 'start_time')->widget(TimePicker::classname(), [
                'options' => [
                    'class' => 'form-control',
                    //'data-time-format' => 'H:i A',
                ],
                'pluginOptions' => [
                    'time24Hours' => true,
                    'showSeconds' => true,
                    'minuteSteps' => 5,
                    'class' => 'form-control',
                ],
            ]); ?>
	</div>
	<div class="col-sm-6">
        <?= $form->field($model, 'end_time')->widget(TimePicker::classname(), [
                'options' => [
                    'class' => 'form-control',
                    //'data-time-format' => 'H:i A',
                ],
            ]); ?>
	</div>
	<div class="col-sm-6">
		<?= $form->field($model, 'break')->textInput() ?>
	</div>
</div>
<div class="form-group">
    <?= Html::submitButton($model->isNewRecord ? 'Create' : 'Update', ['class' => $model->isNewRecord ? 'btn btn-success' : 'btn btn-primary']) ?>
    <?= Html::a('Cancel', ['index'], ['class' => 'btn btn-secondary']) ?>
</div>

<?php ActiveForm::end(); ?>






